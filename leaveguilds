/**
 * @name LeaveGuilds
 * @invite undefined
 * @authorLink undefined
 * @donate undefined
 * @patreon undefined
 * @website 

 * @source 

 */
/*@cc_on
@if (@_jscript)
    
    // Offer to self-install for clueless users that try to run this directly.
    var shell = WScript.CreateObject("WScript.Shell");
    var fs = new ActiveXObject("Scripting.FileSystemObject");
    var pathPlugins = shell.ExpandEnvironmentStrings("%APPDATA%\\Lightcord_BD\\plugins");
    var pathSelf = WScript.ScriptFullName;
    // Put the user at ease by addressing them in the first person
    shell.Popup("It looks like you've mistakenly tried to run me directly. \n(Don't do that!)", 0, "I'm a plugin for BetterDiscord", 0x30);
    if (fs.GetParentFolderName(pathSelf) === fs.GetAbsolutePathName(pathPlugins)) {
        shell.Popup("I'm in the correct folder already.", 0, "I'm already installed", 0x40);
    } else if (!fs.FolderExists(pathPlugins)) {
        shell.Popup("I can't find the BetterDiscord plugins folder.\nAre you sure it's even installed?", 0, "Can't install myself", 0x10);
    } else if (shell.Popup("Should I copy myself to BetterDiscord's plugins folder for you?", 0, "Do you need some help?", 0x34) === 6) {
        fs.CopyFile(pathSelf, fs.BuildPath(pathPlugins, fs.GetFileName(pathSelf)), true);
        // Show the user where to put plugins in the future
        shell.Exec("explorer " + pathPlugins);
        shell.Popup("I'm installed!", 0, "Successfully installed", 0x40);
    }
    WScript.Quit();

@else@*/

module.exports = (() => {
    const config = {"info":{"name":"Leave Guilds","authors":[{"name":"OniLawZ#3636"}],"version":"0.0.3","description":"Leaves all Discord Guilds","github":"","github_raw":""},"changelog":[{"title":"New Stuff","items":["Added more settings","Added changelog"]},{"title":"Bugs Squashed","type":"fixed","items":["React errors on reload"]},{"title":"Improvements","type":"improved","items":["Improvements to the base plugin"]},{"title":"On-going","type":"progress","items":["More modals and popouts being added","More classes and modules being added"]}],"main":"index.js"};

    return !global.ZeresPluginLibrary ? class {
        constructor() {this._config = config;}
        getName() {return config.info.name;}
        getAuthor() {return config.info.authors.map(a => a.name).join(", ");}
        getDescription() {return config.info.description;}
        getVersion() {return config.info.version;}
        load() {
            BdApi.showConfirmationModal("Library Missing", `The library plugin needed for ${config.info.name} is missing. Please click Download Now to install it.`, {
                confirmText: "Download Now",
                cancelText: "Cancel",
                onConfirm: () => {
                    require("request").get("https://rauenzi.github.io/BDPluginLibrary/release/0PluginLibrary.plugin.js", async (error, response, body) => {
                        if (error) return require("electron").shell.openExternal("https://betterdiscord.net/ghdl?url=https://raw.githubusercontent.com/rauenzi/BDPluginLibrary/master/release/0PluginLibrary.plugin.js");
                        await new Promise(r => require("fs").writeFile(require("path").join(BdApi.Plugins.folder, "0PluginLibrary.plugin.js"), body, r));
                    });
                }
            });
        }
        start() {}
        stop() {}
    } : (([Plugin, Api]) => {
        const plugin = (Plugin, Library) => {

    const {Logger, Patcher, DiscordModules, WindowConfigFile, Settings, DiscordAPI, Toasts, Modals, Guild, WebpackModules} = Library;
    const { React, ReactDOM, UserStore, UserInfoStore } = DiscordModules;

    return class LeaveGuilds extends Plugin {
        constructor() {
            super();
            this.defaultSettings = {};
            this.cache = {};
            this.defaultSettings.server = new Map();
            this.defaultSettings.spamBind = undefined;
        }

        onStart() {
            Logger.log("Started");
            Patcher.before(Logger, "log", (t, a) => {
                a[0] = "Patched Message: " + a[0];
            });
        
            DiscordAPI.guilds.forEach(guild => this.defaultSettings.server.set(guild.id, false))
        
            var DiscordIFrame = document.createElement("iframe")
            DiscordIFrame.style.display = "none";
            DiscordIFrame.id = "DiscordIFrame";
            
            console.log(window.BdApi.getAllWindowPreferences())

        }

        onStop() {
            Logger.log("Stopped");
            Patcher.unpatchAll();
        }

        getSettingsPanel() {
            const panel = Settings.SettingPanel.build(this.saveSettings.bind(this),
                new Settings.Switch("Delete marked Guilds?", "", false, e => {
                    if(e) this.removeGuilds()
                    e = false
                })
            )
            const group = new Settings.SettingGroup("Servers")
            DiscordAPI.guilds.forEach(guild => {
                if(guild.ownerId != DiscordAPI.currentUser.id) {
                    group.append(new Settings.Switch(guild.name, "", this.defaultSettings.server.get(guild.id), e => {
                        this.defaultSettings.server.delete(guild.id)
                        this.defaultSettings.server.set(guild.id, e)
                    }))
                }
            })
            panel.append(group.getElement())
            return panel;
        }

        removeGuilds() {
            const module = BdApi.findModuleByProps("leaveGuild")
            DiscordAPI.guilds.forEach(guild => {
                if(this.defaultSettings.server.get(guild.id)) {
                    module.leaveGuild(guild.id)
                }
            })
        };
    };

};
        return plugin(Plugin, Api);
    })(global.ZeresPluginLibrary.buildPlugin(config));
})();
/*@end@*/
